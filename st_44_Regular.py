import re # Імпортую бібліотеку re

#*************************************************************
set_string = 'Это просто строка текста. А это еще одна строка текста'

#*************************************************************
pattern = 'строка'
print('1 -->', pattern in set_string)# 1 --> True

#*************************************************************
# Використовую метод search
# Даний метод шукає строку у патерні всередині

if re.search(pattern, set_string): # Якщо наш патерн є у строці
    print('2 -->', 'Matched')
else:
    print('2 -->', 'No match')# Якщо наш патерн не є у строці
# 2 --> Matched

#*************************************************************
# Можна результат роботи search присвоїти одразу у змінну
res = re.search(pattern, set_string)
print('3 -->', res)
#3 --> <re.Match object; span=(11, 17), match='строка'>
'''
span=(11, 17) - це зріз найденої строки у патерні (індекси)
'''

#*************************************************************
# Можна роздрукувати або присвоїти безпосередньо зріз першого входження строки у патерні:
print('4 -->', res.span())
# 4 --> (11, 17)

#*************************************************************
# Можна роздрукувати або присвоїти початковий індекс першого входження строки у патерні:
print('5 -->', res.start())
#5 --> 11

#*************************************************************
# Можна роздрукувати або присвоїти кінцевий індекс першого входження строки у патерні:
print('6 -->', res.end())
#6 --> 17

#*************************************************************
# Використовую метод match
# На відміну від методу search, даний метод шукає строку на початку патерну
print('7 -->', re.match(pattern, set_string))
# 7 --> None

#*************************************************************
# Використовую метод findall
# Даний метод повертає список всіх знайдених співпадінь
print('8 -->', re.findall(pattern, set_string))
# 8 --> ['строка', 'строка']

#*************************************************************
# Використовую метод split
# Даний метод розділяє строку по заданому патерну, стільки раз, скільки це можливо
print('9 -->', re.split(r'\.', set_string))
# Я за екранував символ "." тому, що даний символ "." використовується як "Любий символ" якщо його не заекранувати
# 9 --> ['Это просто строка текста', ' А это еще одна строка текста']

#*************************************************************
# Я можу вказати максимальну кількість раз, на яку потрібно розбивати нашу строку за допомогою 3-го аргументу
print('10 -->', re.split('ст', set_string, 1))
# 10 --> ['Это про', 'о строка текста. А это еще одна строка текста']

#*************************************************************
# Приклади із використанням символьних класів