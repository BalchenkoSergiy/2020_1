# **********************************************************************************************************************
# **********************************************************************************************************************
# *****Lesson 23 'Dictionaries'

d = {}
print('1-->', type(d))# <class 'dict'>

print('***************************************************************************************************************')
product1 = {'title': 'Sony',
            'price': 100}
product2 = dict(title='iPhone',
                price=110)

print('2-->', product1)# {'title': 'Sony', 'price': 100}
print('3-->' ,product2)# {'title': 'iPhone', 'price': 110}

print('***************************************************************************************************************')
#Создаем словарь из списка или кортежа
users = [
     ['bob@gmail.com', 'Bob'],
     ['katy@gmail.com', 'Katy'],
     ['john@gmail.com', 'John']
 ]
d_users = dict(users)
print('4-->', users)# [['bob@gmail.com', 'Bob'], ['katy@gmail.com', 'Katy'], ['john@gmail.com', 'John']]
print('5-->', d_users)# {'bob@gmail.com': 'Bob', 'katy@gmail.com': 'Katy', 'john@gmail.com': 'John'}

print('***************************************************************************************************************')
users_t = (
     ('bob@gmail.com', 'Bob'),
     ('katy@gmail.com', 'Katy'),
     ('john@gmail.com', 'John')
)
t_users = dict(users_t)
print('6-->', users_t)# (('bob@gmail.com', 'Bob'), ('katy@gmail.com', 'Katy'), ('john@gmail.com', 'John'))
print('7-->', t_users)# {'bob@gmail.com': 'Bob', 'katy@gmail.com': 'Katy', 'john@gmail.com': 'John'}

print('***************************************************************************************************************')
product3 = dict.fromkeys(['price1', 'price2', 'price3'], 50)
print('8-->', product3)# 8--> {'price1': 50, 'price2': 50, 'price3': 50}

print('***************************************************************************************************************')
# Используем генератор для создания словаря
nums = {i: i + 1 for i in range(1, 10)}
print('9-->', nums)# 9--> {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}

print('***************************************************************************************************************')
#print(nums['1']) # error
print('10-->', nums[1]) # 2

print('***************************************************************************************************************')
# Выводим значение по ключу, но обходим ошибки
product1 = {'title': 'Sony', 'price': 100}
product2 = dict(title='iPhone', price=110)

print('11-->', product1['price'])# 100
print('12-->', product1.get('price2', 'NO')) # if no key

print('***************************************************************************************************************')
# перебираем словарь
for key in product1:
    print('13-->', f'{key}: {product1[key]}')   # title: Sony
                                                # price: 100

print('***************************************************************************************************************')
# Возвращаем пары "Ключь - Значения"
for key, value in product1.items():
    print('14-->', key, value)  # title Sony
                                # price 100

print('***************************************************************************************************************')
# Используем список словарей
products = [
    {'title': 'Sony', 'price': 100},
    {'title': 'iPhone', 'price': 110},
    {'title': 'Samsung', 'price': 90}
]
print('15-->', products) # [{'title': 'Sony', 'price': 100}, {'title': 'iPhone', 'price': 110}, {'title': 'Samsung', 'price': 90}]

print('***************************************************************************************************************')
for product in products:
    print('16-->', product['title'], product['price'])  # Sony 100
                                                        # iPhone 110
                                                        # Samsung 90

# **********************************************************************************************************************
# **********************************************************************************************************************
# *****Lesson 24 'Dictionaries methods'
print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
product1.clear()# очищает словарь {}
print('17-->', product1)

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
product2 = product1.copy()
print('18-->', product2)# {'title': 'Sony', 'price': 100} - возвращает копию словаря

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
print('19-->', product1.get('price2', 'Uncknow'))# Uncknow - возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None)

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
print('20-->', product1.items())# dict_items([('title', 'Sony'), ('price', 100)]) - возвращает пары (ключ, значение)

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
print('21-->', product1.keys())# dict_keys(['title', 'price']) - возвращает ключи в словаре

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
# dict.pop(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение)
print('22-->', product1.pop('title2', 'Oooops'))# Oooops
print('22-->', product1.items())# dict_items([('title', 'Sony'), ('price', 100)]

print('22-->', product1.pop('title', 'Oooops'))# Sony
print('22-->', product1.items())# dict_items([('price', 100)])

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
# dict.popitem() - удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены
print('23-->', product1.popitem())# ('price', 100)
print('23-->', product1.items())# dict_items([('title', 'Sony')])


print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
# dict.setdefault(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ с значением default (по умолчанию None)
print('24-->', product1.setdefault('title'))# Sony
print('24-->', product1.items())# dict_items([('title', 'Sony'), ('price', 100)])

print('24-->', product1.setdefault('title2', 'new'))# new
print('24-->', product1.items())# dict_items([('title', 'Sony'), ('price', 100), ('title2', 'new')])

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
# dict.update([other]) - обновляет словарь, добавляя пары (ключ, значение) из other. Существующие ключи перезаписываются. Возвращает None (не новый словарь!)
product1.update({'test': 'value'})
product1.update({'price': 200})
print('25-->', product1.items())# dict_items([('title', 'Sony'), ('price', 200), ('test', 'value')])

print('***************************************************************************************************************')
product1 = {'title': 'Sony', 'price': 100}
# dict.values() - возвращает значения в словаре
print('26-->', product1.values())# dict_values(['Sony', 100])

print('***************************************************************************************************************')

'''
Создайте игру "Угадай число". В коде программы в переменную запишите любое число от 1 до 100 (в следующих уроках мы 
узнаем, как генерировать случайное число), которое и должен угадать игрок. Далее программа должна спросить у игрока 
угадать число. Если пользователь не угадал число - программа сообщает, что загаданное число больше/меньше и 
предлагает попробовать еще раз, при этом программа ведет счета кол-ва попыток игрока. Если игрок угадал число, тогда 
программа благодарит за игру и сообщает кол-во попыток, за которое было угадано число.
'''


